name: Build Ami
on:
  push:
    branches:
      - main
jobs:
  build-ami:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:latest
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
      - name: Run Node.js project
        uses: actions/setup-node@v3
        with:
          node-version: 20
      - name: Wait for MySQL to be ready
        run: |
          until nc -z -v -w30 localhost 3306
          do
            echo "Waiting for MySQL to be ready..."
            sleep 5
          done
      - name: Install project dependencies
        run: npm install
      - name: Set up .env
        run: echo "${{ secrets.ENV_FILE_CONTENT }}" > .env
      - name: Run Integration tests 
        run: npm test
      - name: Build the web app
        run: npm run build
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          aws-profile: github_user
      - name: Install Packer
        run: |
          wget https://releases.hashicorp.com/packer/1.8.5/packer_1.8.5_linux_amd64.zip
          unzip packer_1.8.5_linux_amd64.zip
          sudo mv packer /usr/local/bin/packer
          packer --version
        shell: bash
      - name: Init packer file
        run: packer init .
      - name: Build packer file
        run: packer build .
      - name: Configure Demo AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.DEMO_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEMO_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          aws-profile: demo
      - name: Get the latest AMI ID
        id: get-ami-id
        run: |
          latest_ami_id=$(aws ec2 describe-images --filters "Name=name,Values=csye6225_*" --query 'Images | sort_by(@, &CreationDate) | [-1].ImageId' --output text)
          echo "${latest_ami_id}"
          launch_template_id=$(aws ec2 describe-launch-templates --launch-template-names ASG_Launch_Template --query 'LaunchTemplates[*].LaunchTemplateId')
          echo "${launch_template_id}"
      - name: Create Launch Template version
        id: create-launch-template-version
        run: |
          latest_launch_template_id=$(aws ec2 create-launch-template --launch-template-name latest-template-for-auto-scaling --version-description version1 \
          --launch-template-data '{"ImageId":${latest_ami_id}' )
          echo "${latest_launch_template_id}"
      - name: Update Autoscaling Group Launch Template
        run: |
          aws autoscaling update-auto-scaling-group \
            --auto-scaling-group-name auto_scaling_group \
            --launch-template "LaunchTemplateId=${latest_launch_template_id},Version=$Latest"
      - name: Initiate Instance Refresh
        run: |
          aws autoscaling start-instance-refresh \
            --auto-scaling-group-name auto_scaling_group
      - name: Wait for Instance Refresh to Complete
        run: |
          status="InProgress"
          while [ "$status" == "InProgress" ]; do
            sleep 60  # Adjust the sleep interval as needed
            status=$(aws autoscaling describe-instance-refreshes \
                      --auto-scaling-group-name auto_scaling_group \
                      --query 'InstanceRefreshes[0].Status' \
                      --output text)
          done